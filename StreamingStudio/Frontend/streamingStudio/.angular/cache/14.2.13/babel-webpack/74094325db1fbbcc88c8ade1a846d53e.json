{"ast":null,"code":"import { Injector, NgZone } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { AppMessageService } from '../services/utils/app-message.service';\nimport * as i0 from \"@angular/core\";\nexport let AppErrorHandler = /*#__PURE__*/(() => {\n  class AppErrorHandler {\n    constructor(_injector, _ngZone) {\n      this._injector = _injector;\n      this._ngZone = _ngZone;\n    }\n\n    handleError(error) {\n      let message;\n\n      if (!this._service) {\n        this._service = this._injector.get(AppMessageService);\n      }\n\n      if (error.rejection) {\n        console.log('error.rejection');\n        error = error.rejection;\n      }\n\n      if (error.body) {\n        console.log('error.body');\n\n        if (error.body.message) {\n          console.log('(error.body.message');\n          message = {\n            text: error.body.message,\n            num: error.status\n          };\n        } else if (error.body.error) {\n          message = {\n            text: error.body.error,\n            num: error.status\n          };\n        } else {\n          if (error.status == 0) {\n            message = {\n              text: `Error al conectarse al servicio`,\n              num: error.status\n            };\n          } else if (error.status == 500) {\n            message = {\n              text: `Error interno del servidor`,\n              num: error.status\n            };\n          }\n        }\n      } else if (error.error) {\n        message = {\n          text: error.error,\n          num: error.status\n        };\n      } else if (error.message) {\n        message = {\n          text: error.message,\n          num: error.status\n        };\n      } else {\n        message = {\n          text: error,\n          num: error.status\n        };\n      }\n\n      !environment.production ? console.log(error) : null;\n\n      this._ngZone.run(() => this._service?.showMessage(message), 0);\n    }\n\n  }\n\n  AppErrorHandler.ɵfac = function AppErrorHandler_Factory(t) {\n    return new (t || AppErrorHandler)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i0.NgZone));\n  };\n\n  AppErrorHandler.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppErrorHandler,\n    factory: AppErrorHandler.ɵfac\n  });\n  return AppErrorHandler;\n})();","map":null,"metadata":{},"sourceType":"module"}